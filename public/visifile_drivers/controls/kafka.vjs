function(args) {
/*
is_app(true)
component_type("VB")
hash_algorithm("SHA256")
display_name("Kafka control")
description("This will return the Kafka control")
base_component_id("kafka_control")
load_once_from_file(true)
visibility("PRIVATE")
read_only(true)
properties(
    [
        {
            id:         "width",
            name:       "Width",
            default:    80,
            type:       "Number"
        }
        ,
        {
            id:         "height",
            name:       "Height",
            default:    80,
            type:       "Number"
        }
        ,
        {
            id:         "port",
            name:       "Port",
            default:    1234,
            type:       "Number"
        }
        ,

        {
            id:     "background_color",
            name:   "Background color",
            type:   "String"
        }
        ,
        {
            id:         "is_container",
            name:       "Is Container?",
            type:       "Boolean",
            default:    false,
            hidden:     true
        }
        ,
        {
            id:         "readTopic",
            name:       "Read a Kafka topic()",
            type:       "Action",
            pre_snippet:    `await `,
            snippet:    `readTopic()`
        }
        ,


        {
            id:         "checkKafkaAvailable",
            name:       "Check Kafka Available()",
            type:       "Action",
            pre_snippet:    `await `,
            snippet:    `checkKafkaAvailable()`
        }
        ,
        {
            id:         "isKafkaAvailable",
            name:       "Is Kafka Available?",
            type:       "Select",
            default:    "False",
            values:     [
                            {display: "True",   value: "True"},
                            {display: "False",  value: "False"}
                        ]
        }
        ,
        {
            id:         "has_details_ui",
            name:       "Has details UI?",
            type:       "Boolean",
            default:    true,
            hidden:     true
        }
        ,
        {
            id:         "brokers",
            name:       "Brokers",
            default:    ['localhost:9092'],
            type:       "Array"
        }
        ,
        {
            id:         "client_id",
            name:       "Client ID",
            default:    'myapp',
            type:       "String"
        }
        ,
        {
            id:         "offset",
            name:       "Offset",
            default:    0,
            type:       "Number"
        }
        ,
        {
            id:         "topic",
            name:       "Topic",
            default:    "test",
            type:       "String"
        }
        ,
        {
            id:         "partition",
            name:       "Partition",
            default:    0,
            type:       "Number"
        }
        ,
        {
            id:         "changed",
            name:       "Changed",
            default:    "",
            type:       "String"
        }
    ]
)//properties

logo_url("/driver_icons/kafka.png")
*/

    Yazz.component({

        props: ["meta", "args","design_mode","refresh"]

        ,



        template:

`<div v-bind:style='"height:100%;width:100%; border: 0px;" +
    "background-color: "+    args["background_color"]  +  ";"'>

    <div v-if="design_mode && (design_mode != 'detail_editor')" style="margin: 10px;">
        <img src="/driver_icons/kafka.png" width=100px></src>
        <h3 class="text-center" ></h3>
        The Kafka Connector can be used to query a Kafka cluster
    </div>



    <div v-if="design_mode && (design_mode == 'detail_editor')" style="margin: 10px;">
        <div style="padding:10px;">
            Kafka
        </div>

        <div    v-bind:refresh='refresh'
                v-bind:style='"background-color: " + (args.isKafkaAvailable=="True"?"green":"red" ) +";color: white;padding:10px;"'>
            {{(args.isKafkaAvailable == "True"?"Available":"Not available" )}}
        </div>

        <div    v-bind:style='"border:1px solid gray; padding: 10px;display:flex;"'
                v-bind:refresh='refresh'
                v-if='(!args.brokers) || (args.brokers.length == 0)'>
                No brokers available
        </div>

        <div    v-bind:style='"border:1px solid gray; padding: 10px;display:flex;lightgray;"'
                v-bind:refresh='refresh'
                v-on:click='$event.stopPropagation()'
                v-if='args.brokers'
                v-for='(child_item,index)  in  args.brokers'>

            <div    v-if='child_item'
                    v-bind:refresh='refresh'>

                <div    v-bind:style='"display:inline-block;"'
                        v-if='isValidObject(child_item)'
                        v-bind:refresh='refresh'>{{child_item}}
                </div>

                <div    class='btn btn-danger'
                        v-bind:refresh='refresh'
                        v-if='child_item'
                        v-bind:style='"box-shadow: rgba(0, 0, 0, 0.2) 0px 4px 8px 0px, rgba(0, 0, 0, 0.19) 0px 6px 20px 0px;padding:0px; z-index: 21474836;opacity:1;"  +
                        "width: 20px; height: 20px; line-height:20px;text-align: center;vertical-align: middle;margin-left: 20px;"'
                        v-on:click='$event.stopPropagation();(async function() {await delete_broker(index); })()'>

                        X

                </div>

            </div>

        </div>
        <div class="form-group">
            <label>Server:</label>
            <input v-model="new_server" type="text" class="form-control">
            <label>Port:</label>
            <input v-model="new_port" type="text" class="form-control">
        </div>
        <div    class="btn btn-sm btn-info"
                v-on:click='(async function() {await addBroker(new_server,new_port); })()'
                style="margin-bottom: 30px;">
                Add Kafka broker
        </div>
    </div>


</div>`

        ,

        data: function() {
            return {
                new_server: "",
                new_port: ""
            }
        }

        ,

        mounted: async function() {
            let mm = this
            await registerComponent(this)


            if (mm.design_mode) {
                if (!mm.args.brokers) {
                    mm.args.brokers = []
                }
                await mm.checkKafkaAvailable()

            }
        }
        ,



        methods: {
            readTopic: async function() {
                let mm = this
                var result = await yz.callComponent(
                    {
                        base_component_id: "kafka_service"
                    }
                    ,
                    {
                        offset: mm.args.offset
                        ,
                        //brokers: mm.args.brokers
                        brokers: mm.args.brokers
                        ,
                        client_id: mm.args.client_id
                        ,
                        topic: mm.args.topic
                        ,
                        partition: mm.args.partition
                        ,
                        action: "read_single_message"
                    })

                console.log(JSON.stringify(result,null,2))
                return result
            }
            ,
            checkKafkaAvailable: async function()  {
                let mm = this
                mm.args.isKafkaAvailable = "False"
                var result = await yz.callComponent(
                    {
                        base_component_id: "kafka_service"
                    }
                    ,
                    {
                        brokers: mm.args.brokers
                        ,
                        client_id: mm.args.client_id
                        ,
                        action: "test_connection"
                    })

                if (!result.error) {
                    mm.args.isKafkaAvailable = "True"
                }
                return result
            }
            ,
            delete_broker: async function(index)  {
                let mm = this
                //alert(index)
                mm.args.brokers.splice(index,1)
                await mm.checkKafkaAvailable()
                changedFn();
            }
            ,
            addBroker: async function(new_server,new_port)  {
                let mm = this
                var newBrokerUrl = "" + new_server + ":" + new_port
                mm.args.brokers.push(newBrokerUrl);
                mm.new_server="";
                mm.new_port="";
                await mm.checkKafkaAvailable()
                changedFn();
            }
            ,
            changedFn: function() {
                let mm = this
                if (isValidObject(mm.args)) {
                    mm.args.changed = yz.uuidv4()
                }
            }


        }




    })
}
